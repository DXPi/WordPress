#!/bin/bash


set -x

set -eo pipefail




# shopt -s dotglob
# echo "---> Installing application source..."
# mv /tmp/src/* ./

# # Fix source directory permissions
# fix-permissions ./


mkdir -p /opt/app-root/silo/wordpress




# while ['0'] ; do
#     echo "el 0 es true"
# done

# This S2I assemble script is only used when creating the custom image.
# For when running the image, or using it as a S2I builder, we use a second
# set of custom S2I scripts. We now need to move these into the correct
# location and have the custom image use those by dropping in an image
# metadata file which overrides the labels of the base image.

mkdir -p /opt/app-root/s2i

mv /tmp/src/builder/assemble /opt/app-root/s2i/assemble
mv /tmp/src/builder/run /opt/app-root/s2i/run
mv /tmp/src/builder/save-artifacts /opt/app-root/s2i/save-artifacts

mkdir -p /tmp/.s2i

mv /tmp/src/builder/image_metadata.json /tmp/.s2i/image_metadata.json




# mv /tmp/src/wp-content  /opt/app-root/silo/wordpress/
# mv /tmp/src/wp-config-sample.php /opt/app-root/silo/wordpress/wp-config.php
mv /tmp/src/* ./

rm -f readme.html mio.txt license.txt

rm -rf .git builder

# if [ -f "/opt/app-root/silo/wordpress/wp-config.php" ]; then
#     ln -s /opt/app-root/silo/wordpress/wp-config.php /opt/app-root/src
#     # mv /opt/app-root/src/wp-content /opt/app-root/silo/wordpress && export MI_PID="$!" && \
#     #     while $(kill -0 "$MI_PID");do  sleep 1;done
# fi





rm -rf /tmp/src

# Fixup permissions on directories and files.

fix-permissions /opt/app-root

